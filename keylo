#!/bin/bash

# A floating keyboard to show current key layout.

# TODO: get rest of keycodes
get_keycodes(){
	letter_codes=($(dumpkeys | grep -oP "\d\d(?=\s=\s[+]\w)"))
	letter_order=($(dumpkeys | grep -oP "(?<=\d\d\s=\s[+])\w"))
	# put letter at keys[keycode]
	for k in ${!letter_order[@]}; do
		keys["${letter_codes[$k]}"]="${letter_order[$k]}"
	done
	keys[$(dumpkeys | grep -oP "\w\w(?=\s=\ssemicolon)")]=";"
}
get_keycodes

# TODO: word to symbol func

line_create(){
	for v in "${keys[@]:$2:$((1+$3-$2))}"
	do
		lines["$1"]="${lines[$1]} $v"
	done
}

display_keys(){
	unset lines
	line_create 0 16 25
	lines[1]=" "
	line_create 1 30 39
	lines[2]="  "
	line_create 2 44 50
	screen_centre=$(( $(tput cols) / 2 ))
	let key_start_col=$(( screen_centre - 12 ))
	# tput cuu1
	tput sc
	for i in ${!lines[@]}; do
		tput cup $i $key_start_col
		tput el1
		tput el
		echo -e "${lines[$i]}"
	done
	# clear line below shown keys
	tput el1
	tput el
	tput rc
}
display_keys

prompt_command(){
	# get keycodes each call if --recheck set
	if [ $1 == "-r" -o "--recheck" ]
	then get_keycodes
	fi
	display_keys
}

# fix display
## TODO: if prompt_command not in PROMPT_COMMAND
# PROMPT_COMMAND=prompt_command
